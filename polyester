#input files must be gtf file and whole fasta file of the genome
#as per usual dont use toplevel (contains haplotype information- with aligners cause problems with multimapping) but use primary assembly 
#dna_sm - Repeats soft-masked (converts repeat nucleotides to lowercase)and rougly shows where repeat regions are 
grep -v '^nonsense_mediated_decay' Mus_musculus.GRCm38.95.gtf > Mus_musculus.GRCm38.95_no_NMD.gtf


wget ftp://ftp.ensembl.org/pub/release-95/fasta/mus_musculus//dna/Mus_musculus.GRCm38.dna_sm.primary_assembly.fa.gz


cd tools
git clone git://github.com/gpertea/gclib
git clone git://github.com/gpertea/gffread
cd gffread
make release

#using gffread function to make the transcript fasta file
#gffread can also be used to generate a FASTA file with the DNA sequences for all transcripts in a GFF file. For this operation a fasta file with the genomic sequences have to be provided as well. For example, one might want to extract the sequence of all transfrags assembled from a Cufflinks assembly session. This can be accomplished with a command line like this:
#don't think I will need this

tools/gffread/gffread -w /mnt/lustre/users/k1632479/polyester/Mus_musculus.GRCm38_transcripts.fa -g /mnt/lustre/users/k1632479/grcm38/Ensembl/Mus_musculus.GRCm38.dna_sm.primary_assembly.fa /mnt/lustre/users/k1632479/grcm38/Ensembl/Mus_musculus.GRCm38.95.gtf


tools/gffread/gffread -w /mnt/lustre/users/k1632479/polyester/Mus_musculus.GRCm38_no_NMD_transcripts.fa -g /mnt/lustre/users/k1632479/grcm38/Ensembl/Mus_musculus.GRCm38.dna_sm.primary_assembly.fa /mnt/lustre/users/k1632479/grcm38/Ensembl/Mus_musculus.GRCm38.95_no_NMD.gtf


#to workout the mean_rps
echo $(zcat 13799X1_161209_D00294_0278_BCAEAJANXX_1.fastq.gz |wc -l)/4|bc
52586374
echo $(zcat 13799X2_161209_D00294_0278_BCAEAJANXX_1.fastq.gz |wc -l)/4|bc
45871186

others similar ~50000000

#to remove all the non mitochondrial, numeric, or X,Y chromosomes
grep -v "^" genes.gtf > genes_noMT.gtf



#for polyester I am going to load 
#install polyester and module load R
module load general/R/3.5.0
R

#We also provide a function simulate_experiment_empirical that takes a real transcript expression matrix (in FPKM or RPKM units) and corresponding annotation to simulate an experiment with 
#abundances and differential expression fold changes similar to those given in the expression matrix. This function is compatible with the Ballgown package, or you can simply provide a transcript-by-replicate 
#expression matrix generated with your favorite abundance estimation software.

#must create synthetic read counts
###awk '$1 ~ /^#/ {print $0;next} {if ($1 !~ "GL456211.1" || $1 !~ "GL456210.1" || $1 !~ "GL456216.1" || $1 !~ "GL456219.1" || $1 !~ "GL456221.1" || $1 !~ "GL456233.1" || $1 !~ "GL456239.1" || $1 !~ "GL456350.1" || $1 !~ "GL456354.1" || $1 !~ "GL456372.1" || $1 !~ "GL456381.1" || $1 !~ "GL456385.1" || $1 !~ "JH584292.1" || $1 !~ "JH584293.1" || $1 !~ "JH584294.1" || $1 !~ "JH584295.1" || $1 !~ "JH584296.1" || $1 !~ "JH584297.1" || $1 !~ "JH584298.1" || $1 !~ "JH584299.1" || $1 !~ "JH584303.1" || $1 !~ "JH584304.1") print}' Mus_musculus.GRCm38.95.gtf >  Mus_musculus.GRCm38.95_nocontigs.gtf 

grep -P "^[\dXYM]" Mus_musculus.GRCm38.95.gtf > Mus_musculus.GRCm38.95_nocontigs.gtf
awk '$1 ~ /^#/ {print $0;next} {if ($1 ==  "GL456211.1") print}' Mus_musculus.GRCm38.95_nocontigs.gtf 

#do the same for fasta files
module load bioinformatics/samtools/1.9
#index 
samtools faidx Mus_musculus.GRCm38.dna.primary_assembly.fa
#select chromosomes or regions
samtools faidx Mus_musculus.GRCm38.dna.primary_assembly.fa 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 X Y MT > Mus_musculus.GRCm38.dna.primary_assembly_selected.fa


#trialling doing experimental fasta files 
zcat 13799X1_161209_D00294_0278_BCAEAJANXX_1.fastq.gz| cut -f 1,2 | sed 's/^@/>/' | tr "\t" "\n" > ESC_DMSO.fa
zcat 13799X2_161209_D00294_0278_BCAEAJANXX_1.fastq.gz| cut -f 1,2 | sed 's/^@/>/' | tr "\t" "\n" > ESC_CHX.fa

cat ESC_DMSO.fa ESC_CHX.fa > combined_experimental.fasta



#source("http://bioconductor.org/biocLite.R")
#biocLite("polyester")
library("polyester")
library("ballgown")
library("devtools")
library("seqinr")
library("Biostrings")

# load gtf file for annotation:
####gtfpath = '/mnt/lustre/users/k1632479/grcm38/Ensembl/Mus_musculus.GRCm38.95_nocontigs.gtf'
gtfpath = '/mnt/lustre/users/k1632479/ESC_NSC/STAR/stringtie/stringtie_merged.gtf'
gtf = gffRead(gtfpath)

load('bg.Rda')

#fastaFile <- read.fasta(file = EnsemblfastaFile, as.string = TRUE, seqtype = "DNA")
#EnsemblfastaFile <- "/mnt/lustre/users/k1632479/grcm38/Ensembl/Mus_musculus.GRCm38.dna.primary_assembly_selected.fa"
#EnsemblfastaFile <- "/mnt/lustre/users/k1632479/polyester/fasta/Mus_musculus.GRCm38_transcripts.fa"
#fastaFile <- readDNAStringSet(EnsemblfastaFile)
  ExperimentalfastaFile <-"/mnt/lustre/users/k1632479/ESC_NSC/combined_experimental.fasta"
fastaFile <- readDNAStringSet(ExperimentalfastaFile)

fasta_names <- names(fastaFile)
fasta_names <- substr(fasta_names, 1, 2)
fasta_names <- trimws(fasta_names)
names(fastaFile) <- fasta_names
 

  

# simulate reads based on this experiment's FPKMs
simulate_experiment_empirical(bg, grouplabels=pData(bg)$treatment, seqpath=fastaFile, gtf=gtf, mean_rps=50000000, outdir='/mnt/lustre/users/k1632479/polyester/', seed=1247)


##trial



#######
#' read in GTF/GFF file as a data frame
#'
#' @param gffFile name of GTF/GFF on disk
#' @param nrows number of rows to read in (default -1, which means read all 
#'    rows)
#' @param verbose if TRUE, print status info at beginning and end of file read.
#'    Default FALSE.
#' 
#' @return data frame representing the GTF/GFF file
#' 
#' @seealso \code{\link{getAttributeField}} to extract data from "attributes" 
#'  column; \url{http://useast.ensembl.org/info/website/upload/gff.html} for
#'   more information on the GTF/GFF file format.
#' 
#' @author Kasper Hansen
#' 
#' @export
#' @examples
#' gtfPath = system.file('extdata', 'annot.gtf.gz', package='ballgown')
#' annot = gffRead(gtfPath)
gffRead = function (gffFile, nrows = -1, verbose=FALSE) 
{
    if(verbose){
        cat("Reading ", gffFile, ": ", sep = "")    
    }
    gff = read.table(gffFile, sep = "\t", as.is = TRUE, quote = "", 
        header = FALSE, comment.char = "#", nrows = nrows, 
        colClasses = c("character", "character", "character", "integer", 
            "integer", "character", "character", "character", "character"))
    colnames(gff) = c("seqname", "source", "feature", "start", 
        "end", "score", "strand", "frame", "attributes")
    if(verbose){
        cat("found", nrow(gff), "rows with classes:", paste(sapply(gff, 
            class), collapse = ", "), "\n")
    }
    stopifnot(!any(is.na(gff$start)), !any(is.na(gff$end)))
    return(gff)
}

# source: https://stat.ethz.ch/pipermail/bioconductor/2008-October/024669.html
